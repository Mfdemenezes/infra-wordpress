name: 🚀 WordPress Terraform CI/CD Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - validate
          - plan
          - apply
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    outputs:
      fmt-outcome: ${{ steps.fmt.outcome }}
      validate-outcome: ${{ steps.validate.outcome }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: validate
    if: always() && needs.validate.outputs.validate-outcome == 'success'
    outputs:
      plan-outcome: ${{ steps.plan.outcome }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -detailed-exitcode -out=tfplan
          echo "plan-exitcode=$?" >> $GITHUB_OUTPUT

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ github.sha }}
          path: tfplan
          retention-days: 30

      - name: Save Plan Output
        run: |
          terraform show -no-color tfplan > tfplan.txt

      - name: Upload Plan Output
        uses: actions/upload-artifact@v4
        with:
          name: plan-output-${{ github.sha }}
          path: tfplan.txt
          retention-days: 30
        if: always()

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [validate, plan]
    if: |
      always() && 
      needs.validate.outputs.validate-outcome == 'success' && 
      needs.plan.outputs.plan-outcome == 'success' &&
      (github.event_name == 'push' && github.ref == 'refs/heads/main' ||
       github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: 
      name: ${{ github.event.inputs.environment || 'dev' }}
      url: ${{ steps.output.outputs.wordpress_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        run: terraform init

      - name: Check AWS Permissions
        run: |
          echo "🔐 Checking AWS permissions for WordPress deployment..."
          
          # Check basic AWS access
          aws sts get-caller-identity
          
          # Check VPC permissions
          if aws ec2 describe-vpcs --max-items 1 >/dev/null 2>&1; then
            echo "✅ VPC permissions available"
          else
            echo "❌ VPC permissions required for WordPress infrastructure"
            exit 1
          fi
          
          # Check ALB permissions
          if aws elbv2 describe-load-balancers --max-items 1 >/dev/null 2>&1; then
            echo "✅ ALB permissions available"
          else
            echo "❌ ALB permissions required for WordPress load balancer"
            exit 1
          fi
          
          # Check IAM permissions for SSM
          if aws iam list-roles --max-items 1 >/dev/null 2>&1; then
            echo "✅ IAM permissions available for SSM"
          else
            echo "⚠️  Limited IAM permissions detected"
            echo "💡 Consider setting 'enable_ssm = false' if you encounter IAM errors"
          fi

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ github.sha }}
        continue-on-error: true

      - name: Terraform Apply
        run: |
          set -e
          if [ -f tfplan ]; then
            echo "🚀 Applying existing plan for WordPress infrastructure..."
            terraform apply tfplan
          else
            echo "📋 No plan file found, creating new plan and applying WordPress infrastructure..."
            terraform apply -auto-approve
          fi
        continue-on-error: false

      - name: Handle Apply Errors
        if: failure()
        run: |
          echo "❌ WordPress Terraform Apply failed!"
          echo ""
          echo "🔍 Common WordPress deployment issues and solutions:"
          echo ""
          echo "1. ALB Target Group Health Check Failed:"
          echo "   - WordPress containers may take 5-10 minutes to fully start"
          echo "   - Check if MySQL container is healthy before WordPress starts"
          echo "   - Verify port 8000 is accessible on EC2 instance"
          echo ""
          echo "2. IAM Permissions Error:"
          echo "   - Check if your AWS user has necessary IAM permissions"
          echo "   - Consider disabling SSM by setting 'enable_ssm = false' in terraform.tfvars"
          echo ""
          echo "3. VPC/ALB Resource Already Exists:"
          echo "   - Run 'terraform import' for existing resources"
          echo "   - Or change resource names to avoid conflicts"
          echo ""
          echo "4. MySQL Container Issues:"
          echo "   - Ensure sufficient disk space for MySQL data"
          echo "   - Check MySQL environment variables in user_data.sh"
          echo ""
          echo "💡 Check the AWS Console and Terraform state for more details"
          echo "🐳 Check Docker logs via AWS Session Manager if EC2 is accessible"
          exit 1

      - name: Get WordPress Outputs
        id: output
        run: |
          echo "🎯 WordPress Terraform outputs:"
          terraform output -json
          
          # Set WordPress URL for environment
          if terraform output -raw alb_dns_name >/dev/null 2>&1; then
            alb_dns=$(terraform output -raw alb_dns_name)
            echo "wordpress_url=http://${alb_dns}" >> $GITHUB_OUTPUT
            echo "🌐 WordPress URL: http://${alb_dns}"
            echo "📝 WordPress Admin: http://${alb_dns}/wp-admin"
            echo "⚙️  WordPress Install: http://${alb_dns}/wp-admin/install.php"
          fi

      - name: WordPress Deployment Success
        run: |
          echo "🎉 WordPress infrastructure deployed successfully!"
          echo ""
          echo "📋 Next steps:"
          echo "1. Wait 5-10 minutes for Docker containers to fully start"
          echo "2. Access WordPress setup: http://$(terraform output -raw alb_dns_name)/wp-admin/install.php"
          echo "3. Complete WordPress installation"
          echo "4. Access admin panel: http://$(terraform output -raw alb_dns_name)/wp-admin"
          echo ""
          echo "🔧 Management commands:"
          echo "- SSH to EC2: aws ssm start-session --target $(terraform output -raw instance_ids | jq -r '.[0]')"
          echo "- Check containers: docker compose ps"
          echo "- View logs: docker compose logs wordpress"
          echo ""
          echo "🛡️  Security note: EC2 is in private subnet, accessible only via ALB and SSM"
